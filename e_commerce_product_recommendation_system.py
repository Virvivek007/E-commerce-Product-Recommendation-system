# -*- coding: utf-8 -*-
"""E-Commerce Product Recommendation System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WsASdOwUpzpBJysfPg0hwJT5CSZEj5L8

# **E-commerce Product Recommendation System**
"""

#Importing Python Libraries
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

#Load data
data = pd.read_csv("/content/E-commerce-product_dataset.csv")

#display 5 data
data.head()

#Show the Information of Dataset
data.info()

#All Unique Details of Different category in Dataset
data.nunique()

#Describe about the dataset
data.describe()

data.duplicated().sum()

data.isnull().sum()

#show different Item Type by Region
data[['Item Type','Region']].head(15)

#Display Total Unit sold of different Items Country wise
data[['Units Sold','Item Type','Country']].head(20)

"""# **Data Visualiztion**"""

#Display Barchart
sns.barplot(y='Item Type', x='Units Sold',data=data)
plt.title('Item Type vs Units Sold')
plt.xlabel('Units Sold')
plt.ylabel('Item Type')
plt.show()

# Ensure date column is datetime
data['date'] = pd.to_datetime(data['Order Date'], format='%m/%d/%Y')

# Extract year
data['Year'] = data['date'].dt.year

# Line plot of Total Profit vs Year
sns.lineplot(x='Year', y='Total Profit', data=data, marker='o')
plt.title('Total Profit vs Year')
plt.xlabel('Year')
plt.ylabel('Total Profit')
plt.show()

import plotly.express as px
channel_sales = data.groupby(['Sales Channel'])['Units Sold'].sum().reset_index()
fig = px.pie(channel_sales, values="Units Sold", names="Sales Channel", title="Online vs Offline Sales Share")
fig.show()

country_sales = data.groupby(['Country'])['Units Sold'].sum().reset_index()
fig = px.choropleth(country_sales, locations="Country", locationmode="country names",
                    color="Units Sold", hover_name="Country",
                    title="Country-wise Sales Distribution")
fig.show()

#Display Heatmap of sales channel by Item Type
sns.heatmap(data.pivot_table(values='Units Sold', index='Sales Channel', columns='Item Type', aggfunc='sum'), annot=True)
plt.show()

#  Top-selling products by Region

region_products = data.groupby(['Region', 'Item Type'])['Units Sold'].sum().reset_index()
plt.figure(figsize=(10,5))
sns.barplot(x="Region", y="Units Sold", hue="Item Type", data=region_products)
plt.title("Top-Selling Products by Region")
plt.xticks(rotation=30)
plt.show()

"""# **Machine Learning Techniques to Recommend Products**"""

from sklearn.preprocessing import LabelEncoder
from sklearn.metrics.pairwise import cosine_similarity


# Convert order date to datetime and extract year
data['Order Date'] = pd.to_datetime(data['Order Date'])
data['Year'] = data['Order Date'].dt.year

# ---- Popularity-based Recommendation ----
def recommend_popular(region=None, channel=None, top_n=5):
    df = data.copy()
    if region:
        df = df[df['Region'] == region]
    if channel:
        df = df[df['Sales Channel'] == channel]

    top_products = (df.groupby('Item Type')['Units Sold']
                      .sum()
                      .sort_values(ascending=False)
                      .head(top_n))
    return top_products

print("Top Products in Europe (Online):")
print(recommend_popular(region="Europe", channel="Online"))


# ---- Content-based Filtering ----
# Encode categorical features
features = ['Item Type', 'Region', 'Country', 'Sales Channel']
encoded_data = data[features].apply(LabelEncoder().fit_transform)

# Compute similarity matrix
similarity = cosine_similarity(encoded_data)

def recommend_similar(item_index, top_n=5):
    sim_scores = list(enumerate(similarity[item_index]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)[1:top_n+1]
    recommended_items = data.iloc[[i[0] for i in sim_scores]][['Item Type','Region','Country','Sales Channel']]
    return recommended_items

print("\nSimilar products to row 0:")
print(recommend_similar(0))

"""# **Forecast future demand per item type/year**"""

from statsmodels.tsa.statespace.sarimax import SARIMAX
import matplotlib.pyplot as plt

# Convert Order Date to datetime & extract Year
data['Order Date'] = pd.to_datetime(data['Order Date'], format='%d-%m-%Y')
data['Year'] = data['Order Date'].dt.year

# Aggregate Units Sold by Year and Item Type
trend_data = data.groupby(['Year', 'Item Type'])['Units Sold'].sum().reset_index()

# Example Forecast for "Office Supplies"
product = "Office Supplies"
product_sales = trend_data[trend_data['Item Type'] == product][['Year', 'Units Sold']]
product_sales = product_sales.set_index('Year')

# Fit SARIMA model
model = SARIMAX(product_sales, order=(1,1,1), seasonal_order=(1,1,1,3))
results = model.fit(disp=False)

# Forecast for next 5 years
forecast = results.get_forecast(steps=5)
forecast_index = range(product_sales.index.max()+1, product_sales.index.max()+6)
forecast_values = forecast.predicted_mean

# Plot actual vs forecast
plt.figure(figsize=(8,5))
plt.plot(product_sales.index, product_sales['Units Sold'], marker='o', label="Actual Sales")
plt.plot(forecast_index, forecast_values, marker='x', linestyle='--', label="Forecast")
plt.title(f"Sales Forecast for {product}")
plt.xlabel("Year")
plt.ylabel("Units Sold")
plt.legend()
plt.show()

product_sales.tail(), forecast_values
